# app/utils/fortune_tool.py
import re
from datetime import datetime
from typing import Dict, Optional, Tuple, Any

from app.core.logging import get_logger
from app.services.session_service import get_session_manager
from app.services.reading_service import get_reading_service
from app.services.ai_topic_service import get_ai_topic_service
from app.domain.meaning import FortuneReading

logger = get_logger(__name__)

# Define fortune-related keywords to identify fortune requests
FORTUNE_KEYWORDS = [
    # Thai terms
    'ดวง', 'ดูดวง', 'ทำนาย', 'โหราศาสตร์', 'ชะตา', 'ไพ่ยิปซี', 'ราศี', 'ทำนายดวงชะตา',
    'ดูดวงชะตา', 'ทำนาย', 'ดวงชะตา', 'ดูดวงด้วย', 'ทำนายด้วย', 'ฟันธง',
    
    # Additional Thai variations
    'พยากรณ์', 'ดูเลข', 'เลขศาสตร์', 'ลักษณะวิทยา', 'นิมิต', 'ชีวิต', 'อนาคต', 'หมอดู',
    'วันเกิด', 'ตำแหน่งดาว', 'ความหมาย', 'เดินดวง', 'โชคชะตา', 'ฤกษ์', 'มงคล', 'เคราะห์',
    'โหราจารย์', 'คำทำนาย', 'เวลาเกิด', 'ผูกดวง', 'เกณฑ์ชะตา', 'ดวงดาว', 'คู่ชะตา',
    'ตำรา', 'ความรัก', 'การงาน', 'การเงิน', 'สุขภาพ', 'ครอบครัว', 'ลัคนา', 'เรือนชะตา',
    
    # More specific variants
    'ฐานเกิด', 'ฐานเลข', 'เลขฐาน', 'เลขวันเกิด', 'เลขเดือนเกิด', 'เลขปีเกิด',
    'ดูดวงวันนี้', 'ดูดวงรายเดือน', 'ดูดวงรายปี', 'ดูดวงเนื้อคู่', 'ดูดวงความรัก',
    'ดูดวงการเงิน', 'ดูดวงการงาน', 'ดูดวงสุขภาพ', 'ดูดวงครอบครัว',
    
    # English terms
    'fortune', 'horoscope', 'predict', 'future', 'astrology', 'tarot', 'destiny',
    
    # Additional English variations
    'birth chart', 'reading', 'divination', 'forecast', 'oracle', 'prophecy', 
    'palm reading', 'zodiac', 'stars', 'planets', 'numerology', 'prediction',
    'spiritual', 'mystic', 'clairvoyant', 'psychic', 'fate', 'karma',
    'birth date', 'natal chart', 'prognostication', 'augury', 'soothsay',
    'foretell', 'prophesy', 'divine', 'interpret', 'read'
]

# Date pattern for different formats
DATE_PATTERNS = [
    r'(\d{1,2})[/-](\d{1,2})[/-](\d{4})',  # DD/MM/YYYY or DD-MM-YYYY
    r'(\d{4})[/-](\d{1,2})[/-](\d{1,2})',  # YYYY/MM/DD or YYYY-MM-YYYY
    r'(\d{1,2})\s+(?:มกราคม|กุมภาพันธ์|มีนาคม|เมษายน|พฤษภาคม|มิถุนายน|กรกฎาคม|สิงหาคม|กันยายน|ตุลาคม|พฤศจิกายน|ธันวาคม)\s+(\d{4})'  # DD Month YYYY in Thai
]

# Month name to number mapping for Thai dates
THAI_MONTHS = {
    'มกราคม': 1,
    'กุมภาพันธ์': 2,
    'มีนาคม': 3,
    'เมษายน': 4,
    'พฤษภาคม': 5,
    'มิถุนายน': 6,
    'กรกฎาคม': 7,
    'สิงหาคม': 8,
    'กันยายน': 9,
    'ตุลาคม': 10,
    'พฤศจิกายน': 11,
    'ธันวาคม': 12
}

async def handle_fortune_request(
    user_message: str,
    user_id: Optional[str] = None,
    birth_date: Optional[datetime] = None,
    thai_day: Optional[str] = None
) -> Dict[str, Any]:
    """
    Enhanced tool function for AI to handle fortune reading requests.
    
    This function:
    1. Checks if the message is asking for a fortune reading
    2. Extracts birth date from the message if present
    3. Checks if birth date is already stored in the session
    4. Returns appropriate response based on available information
    
    Args:
        user_message: The user's message/query
        user_id: User identifier for session tracking
        birth_date: Optional birth date if already known
        thai_day: Optional Thai day if already known
        
    Returns:
        A dictionary with the following fields:
        - needs_birthdate: Boolean indicating if we need to ask for birth date
        - is_fortune_request: Boolean indicating if this is a fortune request
        - fortune_reading: Fortune reading result if available
        - user_message: Original user message
        - extracted_birthdate: Birth date extracted from message (if any)
        - error: Error message if any
    """
    logger.info(f"Processing potential fortune request: {user_message[:50]}...")
    
    # Initialize result dictionary
    result = {
        "needs_birthdate": False,
        "is_fortune_request": False,
        "fortune_reading": None,
        "user_message": user_message,
        "extracted_birthdate": None,
        "error": None
    }
    
    try:
        # 1. Check if this is a fortune request using multiple detection methods
        user_message_lower = user_message.lower()
        
        # Method 1: Direct keyword matching
        is_fortune_request = any(keyword in user_message_lower for keyword in FORTUNE_KEYWORDS)
        
        # Method 2: Check for date patterns which often indicate fortune requests
        has_date_pattern = False
        if not is_fortune_request:
            for pattern in DATE_PATTERNS:
                if re.search(pattern, user_message):
                    has_date_pattern = True
                    # If we find a date pattern and some indication of wanting information about it
                    info_indicators = ['เกิด', 'birth', 'born', 'ทำนาย', 'บอก', 'tell', 'predict', 'know', 'mean']
                    if any(indicator in user_message_lower for indicator in info_indicators):
                        logger.info("Detected date pattern with request indicator, treating as fortune request")
                        is_fortune_request = True
                        break
        
        # Method 3: Check for common question patterns about oneself
        if not is_fortune_request:
            fortune_question_patterns = [
                r'(ช่วย|โปรด|กรุณา)[^.?!]*?(บอก|ทำนาย|ดู)[^.?!]*?(ฉัน|ดิฉัน|ผม)',
                r'(please|can you|could you)[^.?!]*?(tell|predict|read)[^.?!]*?(me|my)',
                r'(อยาก|ต้องการ|ขอ)[^.?!]*?(รู้|ทราบ)[^.?!]*?(ชีวิต|อนาคต|เหตุการณ์)',
                r'(want|need|would like)[^.?!]*?(know|understand)[^.?!]*?(life|future|event)'
            ]
            for pattern in fortune_question_patterns:
                if re.search(pattern, user_message_lower):
                    logger.info("Detected fortune question pattern, treating as fortune request")
                    is_fortune_request = True
                    break
                    
        # Method 4: Check if the message mentions a birth date combined with question words
        if not is_fortune_request and (birth_date or has_date_pattern):
            question_patterns = [r'\?', r'ใคร', r'อะไร', r'ที่ไหน', r'เมื่อไหร่', r'อย่างไร', r'ทำไม', r'เท่าไหร่']
            if any(re.search(pattern, user_message) for pattern in question_patterns):
                logger.info("Detected birth date with question pattern, treating as fortune request")
                is_fortune_request = True
                
        # Method 5: Try to get topic from AI topic service to check if it's fortune-related
        try:
            from app.services.ai_topic_service import get_ai_topic_service
            ai_topic_service = get_ai_topic_service()
            if ai_topic_service and not is_fortune_request:
                topic_result = await ai_topic_service.detect_topic(user_message)
                if topic_result and topic_result.primary_topic in ["ทั่วไป", "โชคลาภ", "อนาคต"]:
                    logger.info(f"AI topic service detected a fortune-related topic: {topic_result.primary_topic}")
                    is_fortune_request = True
        except Exception as topic_error:
            logger.debug(f"Non-critical error in AI topic detection: {str(topic_error)}")
        
        result["is_fortune_request"] = is_fortune_request
        
        if not is_fortune_request:
            logger.debug("Not a fortune request, returning early")
            return result
        
        # Continue with the rest of the fortune request handling...
        # Get the session manager
        session_manager = get_session_manager()
        
        # Generate a user ID if not provided
        if not user_id:
            import uuid
            user_id = str(uuid.uuid4())
            logger.info(f"Generated new user_id: {user_id}")
        
        # 2. Extract birth date from message if present and not provided
        if not birth_date:
            extracted_date, extracted_date_text = extract_birth_date(user_message)
            
            if extracted_date:
                logger.info(f"Extracted birth date: {extracted_date.strftime('%Y-%m-%d')} from: {extracted_date_text}")
                birth_date = extracted_date
                result["extracted_birthdate"] = extracted_date.strftime("%Y-%m-%d")
                
                # Save to session
                session_manager.save_birth_info(user_id, extracted_date, thai_day)
        
        # 3. Check for existing birth info in session if still no birth_date
        if not birth_date:
            birth_info = session_manager.get_birth_info(user_id)
            if birth_info:
                try:
                    birth_date = datetime.strptime(birth_info["birth_date"], "%Y-%m-%d")
                    thai_day = birth_info["thai_day"]
                    logger.info(f"Using stored birth info: {birth_date.strftime('%Y-%m-%d')}, {thai_day}")
                except (ValueError, KeyError) as e:
                    logger.warning(f"Invalid stored birth info: {str(e)}")
        
        # 4. Process fortune reading if we have birth date
        if birth_date:
            try:
                # Get reading service
                reading_service = await get_reading_service()
                
                # Get AI topic service for enhanced topic detection
                ai_topic_service = get_ai_topic_service()
                
                # Attempt to get fortune reading
                reading = await reading_service.get_fortune_reading(
                    birth_date=birth_date,
                    thai_day=thai_day,
                    user_question=user_message,
                    user_id=user_id
                )
                
                # Try to enhance with topic detection
                if reading and ai_topic_service:
                    try:
                        topic_result = await ai_topic_service.detect_topic(user_message)
                        if topic_result:
                            reading.topic = topic_result.primary_topic
                            reading.confidence = topic_result.confidence
                    except Exception as topic_error:
                        logger.warning(f"Non-critical error in topic detection: {str(topic_error)}")
                
                result["fortune_reading"] = reading.dict() if reading else None
                logger.info("Fortune reading processed successfully")
                
            except Exception as reading_error:
                logger.error(f"Error getting fortune reading: {str(reading_error)}", exc_info=True)
                result["error"] = f"Error processing fortune reading: {str(reading_error)}"
                
                # Try to create a basic reading with calculator service directly if the main reading fails
                try:
                    from app.services.calculator import CalculatorService
                    calculator = CalculatorService()
                    
                    # Get basic calculation result
                    calculator_result = calculator.calculate_birth_bases(birth_date, thai_day)
                    
                    # Create a simplified reading
                    birth_info = calculator_result.birth_info
                    base1 = calculator_result.bases.base1
                    base2 = calculator_result.bases.base2
                    base3 = calculator_result.bases.base3
                    base4 = calculator_result.bases.base4
                    
                    # Generate a simple meaning based on calculator result
                    special_positions = []
                    
                    # Check for special values (1, 5, 7) which are considered significant
                    for base_num, base_values in enumerate([base1, base2, base3, base4], 1):
                        for pos, value in enumerate(base_values, 1):
                            if value in [1, 5, 7]:
                                base_name = ["วันเกิด", "เดือนเกิด", "ปีเกิด", "รวม"][base_num-1]
                                special_positions.append(f"ฐาน{base_num} ({base_name}) ตำแหน่ง {pos}: {value}")
                    
                    # Build basic meaning
                    if special_positions:
                        meaning_text = f"จากการคำนวณค่าเลขฐานเกิดของท่าน พบว่ามีตำแหน่งพิเศษดังนี้:\n"
                        meaning_text += "\n".join(special_positions)
                        meaning_text += f"\n\nวันเกิด: {birth_info.day} ({birth_info.day_value})"
                        meaning_text += f"\nปีเกิด: {birth_info.year_animal} ({birth_info.year_start_number})"
                    else:
                        meaning_text = "ไม่พบค่าเลขพิเศษในฐานเกิดของท่าน แต่นี่คือข้อมูลการคำนวณฐานเกิด:\n"
                        meaning_text += f"ฐาน1 (วันเกิด): {base1}\n"
                        meaning_text += f"ฐาน2 (เดือนเกิด): {base2}\n"
                        meaning_text += f"ฐาน3 (ปีเกิด): {base3}\n"
                        meaning_text += f"ฐาน4 (ผลรวม): {base4}"
                    
                    result["fortune_reading"] = {
                        "birth_date": birth_date.strftime("%Y-%m-%d") if birth_date else "",
                        "thai_day": thai_day if thai_day else "",
                        "question": user_message,
                        "heading": "ข้อมูลจากการคำนวณฐานเกิด",
                        "meaning": meaning_text,
                        "influence_type": "การวิเคราะห์ทั่วไป"
                    }
                    
                    logger.info("Created simplified fortune reading from calculator")
                    
                except Exception as fallback_error:
                    logger.error(f"Fallback reading also failed: {str(fallback_error)}", exc_info=True)
                    result["fortune_reading"] = {
                        "birth_date": birth_date.strftime("%Y-%m-%d") if birth_date else "",
                        "thai_day": thai_day if thai_day else "",
                        "question": user_message,
                        "heading": "เกิดข้อผิดพลาด",
                        "meaning": f"เกิดข้อผิดพลาดในการวิเคราะห์ แต่นี่คือข้อมูลวันเกิดที่ท่านให้: {birth_date.strftime('%Y-%m-%d') if birth_date else ''}, {thai_day if thai_day else ''}",
                        "influence_type": "ไม่ทราบ"
                    }
        else:
            # We need to ask for birth date
            result["needs_birthdate"] = True
            logger.info("No birth date available, need to ask for it")
        
        return result
        
    except Exception as e:
        logger.error(f"Unexpected error in fortune tool: {str(e)}", exc_info=True)
        result["error"] = str(e)
        return result

def extract_birth_date(text: str) -> Tuple[Optional[datetime], Optional[str]]:
    """
    Extract birth date from text using various patterns
    
    Args:
        text: The text to extract date from
        
    Returns:
        Tuple of (datetime object if found, extracted text)
    """
    # Try standard date formats: DD/MM/YYYY, YYYY/MM/DD
    for pattern in DATE_PATTERNS:
        matches = re.finditer(pattern, text)
        for match in matches:
            try:
                matched_text = match.group(0)
                
                # First pattern: DD/MM/YYYY
                if pattern == DATE_PATTERNS[0]:
                    day, month, year = int(match.group(1)), int(match.group(2)), int(match.group(3))
                    if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100:
                        return datetime(year, month, day), matched_text
                
                # Second pattern: YYYY/MM/DD
                elif pattern == DATE_PATTERNS[1]:
                    year, month, day = int(match.group(1)), int(match.group(2)), int(match.group(3))
                    if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2100:
                        return datetime(year, month, day), matched_text
                
                # Third pattern: Thai format (DD Month YYYY)
                elif pattern == DATE_PATTERNS[2]:
                    day = int(match.group(1))
                    thai_month = match.group(2)
                    year = int(match.group(3))
                    
                    # Convert Thai month name to number
                    if thai_month in THAI_MONTHS:
                        month = THAI_MONTHS[thai_month]
                        if 1 <= day <= 31 and 1900 <= year <= 2100:
                            return datetime(year, month, day), matched_text
            
            except (ValueError, IndexError) as e:
                logger.debug(f"Failed to parse date from {match.group(0)}: {str(e)}")
                continue
    
    return None, None 