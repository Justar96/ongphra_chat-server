# app/utils/ai_tools.py
from typing import Dict, Any, Optional
import json
from datetime import datetime

from app.core.logging import get_logger
from app.utils.fortune_tool import handle_fortune_request
from app.services.reading_service import get_reading_service
from app.services.ai_topic_service import get_ai_topic_service
from app.services.calculator import CalculatorService

logger = get_logger(__name__)

async def process_fortune_tool(
    user_message: str,
    user_id: Optional[str] = None,
    birth_date: Optional[datetime] = None,
    thai_day: Optional[str] = None
) -> Dict[str, Any]:
    """
    Enhanced tool for AI to handle fortune reading requests with improved service integration.
    
    This tool:
    1. Analyzes the user's message to detect fortune-related requests
    2. Checks if birth date information is available or can be extracted from the message
    3. Uses enhanced services for more accurate readings
    4. Provides detailed error handling and logging
    
    Args:
        user_message: The user's message or question
        user_id: Optional user identifier for session tracking
        birth_date: Optional birth date if already known
        thai_day: Optional Thai day if already known
        
    Returns:
        A structured response with the following fields:
        - needs_birthdate: Boolean indicating if we need to ask for birth date
        - is_fortune_request: Boolean indicating if this is a fortune request
        - fortune_reading: Fortune reading result if available, including:
            - birth_date: Birth date used for the reading
            - thai_day: Thai day of the birth date
            - question: User's question
            - heading: Reading heading
            - meaning: Reading content
            - influence_type: Type of influence
            - topic: Detected topic
            - confidence: Topic detection confidence
        - user_message: Original user message
        - extracted_birthdate: Birth date extracted from message (if any)
        - error: Error message if any
        - debug_info: Additional debug information
    """
    logger.info(f"Processing potential fortune request: '{user_message[:50]}...'")
    
    # Initialize debug info immediately to track all steps
    debug_info = {
        "timestamp": datetime.now().isoformat(),
        "functions_called": [],
        "services_initialized": {},
        "message_length": len(user_message) if user_message else 0,
        "birth_date_provided": birth_date is not None,
        "thai_day_provided": thai_day is not None,
        "user_id_provided": user_id is not None
    }
    
    try:
        # Initialize services with robust error handling
        reading_service = None
        ai_topic_service = None
        calculator_service = None
        
        try:
            reading_service = await get_reading_service()
            debug_info["services_initialized"]["reading_service"] = True
        except Exception as rs_error:
            logger.error(f"Failed to initialize reading service: {str(rs_error)}")
            debug_info["services_initialized"]["reading_service"] = False
            debug_info["reading_service_error"] = str(rs_error)
            
        try:
            ai_topic_service = get_ai_topic_service()
            debug_info["services_initialized"]["ai_topic_service"] = True
        except Exception as ts_error:
            logger.error(f"Failed to initialize AI topic service: {str(ts_error)}")
            debug_info["services_initialized"]["ai_topic_service"] = False
            debug_info["ai_topic_service_error"] = str(ts_error)
            
        try:
            calculator_service = CalculatorService()
            debug_info["services_initialized"]["calculator_service"] = True
        except Exception as cs_error:
            logger.error(f"Failed to initialize calculator service: {str(cs_error)}")
            debug_info["services_initialized"]["calculator_service"] = False
            debug_info["calculator_service_error"] = str(cs_error)
        
        # Validate input parameters
        if user_message is None or user_message.strip() == "":
            debug_info["error"] = "Empty user message"
            logger.warning("Empty user message provided to process_fortune_tool")
            return {
                "error": "Empty message",
                "is_fortune_request": False,
                "needs_birthdate": False,
                "user_message": user_message or "",
                "fortune_reading": None,
                "debug_info": debug_info
            }
        
        # Call the fortune handler function with enhanced error handling
        debug_info["functions_called"].append("handle_fortune_request")
        result = await handle_fortune_request(
            user_message=user_message,
            user_id=user_id,
            birth_date=birth_date,
            thai_day=thai_day
        )
        
        # Merge our debug info with the result
        if "debug_info" not in result:
            result["debug_info"] = {}
        result["debug_info"].update(debug_info)
        
        # Enhance the result with additional information if available
        if result["is_fortune_request"] and result["fortune_reading"]:
            # Only try topic detection if not already done in handle_fortune_request
            if "topic" not in result["fortune_reading"] and ai_topic_service:
                try:
                    debug_info["functions_called"].append("ai_topic_service.detect_topic")
                    topic_result = await ai_topic_service.detect_topic(user_message)
                    if topic_result:
                        result["fortune_reading"]["topic"] = topic_result.primary_topic
                        result["fortune_reading"]["confidence"] = topic_result.confidence
                        result["fortune_reading"]["secondary_topics"] = topic_result.secondary_topics
                        result["debug_info"]["topic_analysis"] = {
                            "primary_topic": topic_result.primary_topic,
                            "confidence": topic_result.confidence,
                            "reasoning": topic_result.reasoning
                        }
                except Exception as topic_error:
                    logger.warning(f"Non-critical error in topic analysis: {str(topic_error)}")
                    result["debug_info"]["topic_analysis_error"] = str(topic_error)
            
            # Add calculator debug info if available and not already done
            if birth_date and calculator_service and "calculator" not in result["debug_info"]:
                try:
                    debug_info["functions_called"].append("calculator_service.calculate_birth_bases")
                    calc_result = calculator_service.calculate_birth_bases(birth_date, thai_day)
                    if calc_result:
                        result["debug_info"]["calculator"] = {
                            "birth_info": {
                                "day": calc_result.birth_info.day,
                                "day_value": calc_result.birth_info.day_value,
                                "year_animal": calc_result.birth_info.year_animal
                            },
                            "bases_summary": {
                                "base1": calc_result.bases.base1[:3] + ["..."],  # Just show first few elements to avoid large logs
                                "base2": calc_result.bases.base2[:3] + ["..."],
                                "base3": calc_result.bases.base3[:3] + ["..."],
                                "base4": calc_result.bases.base4[:3] + ["..."]
                            }
                        }
                except Exception as calc_error:
                    logger.warning(f"Non-critical error in calculator debug info: {str(calc_error)}")
                    result["debug_info"]["calculator_error"] = str(calc_error)
        
        # Add execution timing
        result["debug_info"]["execution_time"] = {
            "start": debug_info["timestamp"],
            "end": datetime.now().isoformat()
        }
        
        # Log the result summary
        if result["is_fortune_request"]:
            if result["needs_birthdate"]:
                logger.info("Fortune request identified, but need birth date")
            elif result["fortune_reading"]:
                logger.info(f"Fortune reading processed successfully: {result['fortune_reading']['heading'][:50]}...")
                if "topic" in result["fortune_reading"]:
                    logger.info(f"Detected topic: {result['fortune_reading']['topic']} " +
                              f"(confidence: {result['fortune_reading'].get('confidence', 0):.2f})")
        else:
            logger.info("Not a fortune request")
            
        return result
        
    except Exception as e:
        logger.error(f"Error in process_fortune_tool: {str(e)}", exc_info=True)
        return {
            "error": str(e),
            "is_fortune_request": False,
            "needs_birthdate": False,
            "user_message": user_message or "",
            "fortune_reading": None,
            "debug_info": {
                **debug_info,
                "error_type": type(e).__name__,
                "error_details": str(e),
                "traceback": str(e.__traceback__),
                "end_timestamp": datetime.now().isoformat()
            }
        }

def get_available_ai_tools() -> Dict[str, Any]:
    """
    Get a dictionary of all available AI tools with enhanced descriptions
    
    Returns:
        Dictionary mapping tool names to their function references and metadata
    """
    return {
        "process_fortune": {
            "function": process_fortune_tool,
            "description": "Process fortune reading requests with enhanced topic detection and analysis",
            "requires_user_id": False,
            "handles_birth_date": True,
            "provides_debug_info": True
        }
    } 